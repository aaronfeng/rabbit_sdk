* design
- each party has an identity, also serving as their "address"
- parties can send messages to each other
- receiving parties can identify the sender
- messages get given unique ids
- messages can be correlated to other messages
- all created broker entities are durable

msg = {body, from, to, reply_to, message_id, correlation_id}

** methods
- init(connection, optional msg_id_prefix). The msg_id_prefix forms
  the first part of ids created with next_id(). It should be
  monotonically increasing *between runs*. The currrent time is prob
  good enough for most apps, and that's the default. But apps may also
  consider keeping a disk-based counter.
- setup delegate that is called after the channels have
  been created.
- next_id() - apps can/should use this to populate the message_id
  field. It is important that apps call 'send' with monotonically
  increasing ids.
- send(msg)
- receive() -> msg. Invoked to receive a message.
- ack(msg). Called to ack a message.
- callback sent(msg) - invoked when broker has accepted
  responsibility

** props
- identity, exchange="", exchange_type="direct", queue=identity
- prefetch_limit=0
- readonly connection, sending_channel, receiving_channel
- commit/checkpoint every n msgs / ms, or wait n ms
- 'sent', and 'lifecycle_event' callback handlers

NB: internally we use *two* channels, one for publishes and one for
deliveries/acks. This keeps the concurrency handling simpler and also
means we can put the publish channel in tx/checkpoint mode w/o
affecting the delivery channel.

* reliability design

** automatc connection re-establishment
We only re-establish the connection when it either just got dropped at
the tcp level, or the server closed the connection with a reason of
connection-forced or internal-error. If the connection gets closed for
any other reason, or we encounter a channel error (that doesn't close
the connection) we do not attempt to reconnect.

** reconnect policy
To start with, just a pause between attempts and a limit on the number
of attempts should do.

Later we may want to add exponential backoff, etc.

** reliability policy
To start with, just allow selection of tx w commit after every
message. In fact make this the default and non-tx case the alternative.

Later allow choice of the following policies
- none
- commit every n msgs or m ms, whichever happens sooner
- buffer at least n msgs, for at least m ms

** multi threading
To start with only allow single-threaded use of an IMessaging
instance.

Later we ought to support a single sending thread and multiple
receiving/ack-ing threads.

* todo

** TODO update design notes
** TODO API docs
** TODO use nunit
